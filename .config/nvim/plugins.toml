# Language .......................................

[[plugins]]
repo = 'sheerun/vim-polyglot'
merged = 0
if = "!exists('g:vscode')"

[[plugins]]
repo = 'kchmck/vim-coffee-script'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'tpope/vim-markdown'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'
if = "!exists('g:vscode')"

# Completion .....................................

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
if = "has('nvim') && !exists('g:vscode')"
hook_add = '''
  let g:coc_global_extensions=[
        \  'coc-actions',
        \  'coc-css',
        \  'coc-eslint',
        \  'coc-explorer',
        \  'coc-git',
        \  'coc-highlight',
        \  'coc-html',
        \  'coc-import-cost',
        \  'coc-json',
        \  'coc-lists',
        \  'coc-marketplace',
        \  'coc-pairs',
        \  'coc-rust-analyzer',
        \  'coc-sh',
        \  'coc-tsserver',
        \  'coc-vetur',
        \  'coc-vimlsp',
        \  'coc-yaml',
        \]

  set signcolumn=yes

  augroup mygroup
    autocmd!

    " Highlight occurences of word under cursor
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Setup formatexpr specified filetype(s)
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')

    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  function! s:cocActionsOpenFromSelected(type) abort
    execute 'CocCommand actions.open ' . a:type
  endfunction

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')
'''

[[plugins]]
repo = 'honza/vim-snippets'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'mattn/emmet-vim'
if = "!exists('g:vscode')"

# Code Display ...................................

# [[plugins]]
# repo = 'frazrepo/vim-rainbow'
# if = "!exists('g:vscode')"
# hook_add = 'let g:rainbow_active=1'

[[plugins]]
repo = 'lewis6991/moonlight.vim'
if = "!exists('g:vscode')"
hook_source = '''
  function! ColoMoonlight()
    if has('nvim')
      " Floating window background with higher contrast
      hi CocFloating      guibg=#1B1B1B
      " Make hovered word bold
      hi CocHighlightText guibg=#333333
    endif
    " Background fix
    hi Normal guibg=#060810
    " Clearer cursorline
    hi CursorLine       guibg=#121524
    " Bold matching bracket
    hi MatchParen       gui=bold

    if exists('*LightlineColorscheme')
      call LightlineColorscheme('one')
    endif
  endfunction

  au! ColorScheme moonlight call ColoMoonlight()
'''

[[plugins]]
repo = 'pgavlin/pulumi.vim'
if = "!exists('g:vscode')"
hook_source = '''
  function! ColoPulumi()
    if exists('*LightlineColorscheme')
      call LightlineColorscheme('one')
    endif
  endfunction
  
  au! ColorScheme pulumi call ColoPulumi()
'''

[[plugins]]
repo = 'bluz71/vim-nightfly-guicolors'
if = "!exists('g:vscode')"
hook_source = '''
  function! ColoNightfly()
    if exists('*LightlineColorscheme')
      call LightlineColorscheme('nightfly')
    endif
  endfunction
  
  au! ColorScheme nightfly call ColoNightfly()
'''

[[plugins]]
repo = 'flrnd/plastic.vim'
if = "!exists('g:vscode')"
hook_source = '''
  function! ColoPlastic()
    if exists('*LightlineColorscheme')
      call LightlineColorscheme('plastic')
    endif
  endfunction
  
  au! ColorScheme plastic call ColoPlastic()
'''

[[plugins]]
repo = 'flrnd/candid.vim'
if = "!exists('g:vscode')"
hook_source = '''
  function! ColoCandid()
    if exists('*LightlineColorscheme')
      call LightlineColorscheme('one')
    endif
  endfunction
  
  au! ColorScheme colocandid call ColoCandid()
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
if = "!exists('g:vscode')"

# Integrations ...................................

[[plugins]]
repo = 'tpope/vim-fugitive'
if = "!exists('g:vscode')"
hook_add = '''
  " Prevent EditorConfig from clashing with Fugitive
  let g:EditorConfig_exclude_patterns = ['fugitive://.*']
'''

# Interface ......................................

[[plugins]]
repo = 'itchyny/lightline.vim'
if = "!exists('g:vscode')"
hook_add = '''
  let g:lightline = {
  \  'colorscheme': 'one',
  \  'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
  \  'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
  \  'active': {
  \    'left': [['mode', 'paste'], ['git', 'diagnostic', 'filename', 'method', 'modified']],
  \    'right': [['filetype', 'fileencoding', 'lineinfo', 'percent'], ['blame']]
  \  },
  \  'inactive': {
  \    'left': [['filename', 'modified']],
  \    'right': [['lineinfo'], ['percent']]
  \  },
  \  'component_function': {
  \    'blame': 'LightlineGitBlame'
  \  },
  \}

  function! LightlineGitBlame() abort
    let blame = get(b:, 'coc_git_blame', '')
    " return blame
    return winwidth(0) > 120 ? blame : ''
  endfunction

  function! LightlineUpdate() abort
    if !exists('g:loaded_lightline')
      return
    endif
    
    try
      if g:colors_name =~# join(map(globpath(&rtp,"autoload/lightline/colorscheme/*.vim",1,1),"fnamemodify(v:val,':t:r')"),'\|')")
        let g:lightline.colorscheme = substitute(substitute(g:colors_name,'-','_','g'),'256.*','','')

        call lightline#init()
        call lightline#colorscheme()
        call lightline#update()
      endif
    catch
      echom 'Failed to change ColorScheme'
    endtry
  endfunction
'''

[[plugins]]
repo = 'junegunn/goyo.vim'
if = "!exists('g:vscode')"
hook_add = '''
  augroup limelight
    autocmd!
    au User GoyoEnter Limelight
    au User GoyoLeave Limelight!
  augroup end

  let g:goyo_width = 100
  let g:goyo_height = '90%'
'''

[[plugins]]
repo = 'junegunn/limelight.vim'
if = "!exists('g:vscode')"

# Commands .......................................

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'mtth/scratch.vim'
if = "!exists('g:vscode')"

# Other ..........................................

[[plugins]]
repo = 'tpope/vim-sensible'

[[plugins]]
repo = 'tpope/vim-sleuth'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'milesmanners/vim-stagehand'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'kristijanhusak/vim-carbon-now-sh'
if = "!exists('g:vscode')"
hook_add = '''
  let g:carbon_now_sh_browser = "/c/Program\ Files/Firefox\ Developer\ Edition/firefox.exe"
  let g:carbon_now_sh_options = {
    \'t': 'night-owl',
    \'bg': '#8779A5',
    \'wt': 'none', 'wc': 'false',
    \'fm': 'Fira Code', 'fs': '14px',
    \'ln': 'false',
    \'ds': 'true', 'dsyoff': '20px', 'dsblur': '68px',
    \'wa': 'true',
    \'lh': '133%',
    \'pv': '30px', 'ph': '30px',
    \'si': 'false',
    \'wm': 'false',
    \'es': '2x',
    \'type': 'png'
  \}
'''

[[plugins]]
repo = 'mbbill/undotree'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'easymotion/vim-easymotion'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'asvetliakov/vim-easymotion'
if = "exists('g:vscode')"

[[plugins]]
repo = 'gkz/vim-ls'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'posva/vim-vue'
if = "!exists('g:vscode')"
